// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.


// Generated by Quartus Prime Version 19.1 (Build Build 670 09/22/2019)
// Created on Mon Feb 24 17:51:46 2025

pins pins_inst
(
	.ADC_CLK_10(ADC_CLK_10_sig) ,	// input  ADC_CLK_10_sig
	.MAX10_CLK1_50(MAX10_CLK1_50_sig) ,	// input  MAX10_CLK1_50_sig
	.MAX10_CLK2_50(MAX10_CLK2_50_sig) ,	// input  MAX10_CLK2_50_sig
	.DRAM_ADDR(DRAM_ADDR_sig) ,	// output [12:0] DRAM_ADDR_sig
	.DRAM_BA(DRAM_BA_sig) ,	// output [1:0] DRAM_BA_sig
	.DRAM_CAS_N(DRAM_CAS_N_sig) ,	// output  DRAM_CAS_N_sig
	.DRAM_CKE(DRAM_CKE_sig) ,	// output  DRAM_CKE_sig
	.DRAM_CLK(DRAM_CLK_sig) ,	// output  DRAM_CLK_sig
	.DRAM_CS_N(DRAM_CS_N_sig) ,	// output  DRAM_CS_N_sig
	.DRAM_DQ(DRAM_DQ_sig) ,	// inout [15:0] DRAM_DQ_sig
	.DRAM_LDQM(DRAM_LDQM_sig) ,	// output  DRAM_LDQM_sig
	.DRAM_RAS_N(DRAM_RAS_N_sig) ,	// output  DRAM_RAS_N_sig
	.DRAM_UDQM(DRAM_UDQM_sig) ,	// output  DRAM_UDQM_sig
	.DRAM_WE_N(DRAM_WE_N_sig) ,	// output  DRAM_WE_N_sig
	.HEX0(HEX0_sig) ,	// output [7:0] HEX0_sig
	.HEX1(HEX1_sig) ,	// output [7:0] HEX1_sig
	.HEX2(HEX2_sig) ,	// output [7:0] HEX2_sig
	.HEX3(HEX3_sig) ,	// output [7:0] HEX3_sig
	.HEX4(HEX4_sig) ,	// output [7:0] HEX4_sig
	.HEX5(HEX5_sig) ,	// output [7:0] HEX5_sig
	.KEY(KEY_sig) ,	// input [1:0] KEY_sig
	.LEDR(LEDR_sig) ,	// output [9:0] LEDR_sig
	.SW(SW_sig) ,	// input [9:0] SW_sig
	.VGA_B(VGA_B_sig) ,	// output [3:0] VGA_B_sig
	.VGA_G(VGA_G_sig) ,	// output [3:0] VGA_G_sig
	.VGA_HS(VGA_HS_sig) ,	// output  VGA_HS_sig
	.VGA_R(VGA_R_sig) ,	// output [3:0] VGA_R_sig
	.VGA_VS(VGA_VS_sig) ,	// output  VGA_VS_sig
	.GSENSOR_CS_N(GSENSOR_CS_N_sig) ,	// output  GSENSOR_CS_N_sig
	.GSENSOR_INT(GSENSOR_INT_sig) ,	// input [2:1] GSENSOR_INT_sig
	.GSENSOR_SCLK(GSENSOR_SCLK_sig) ,	// output  GSENSOR_SCLK_sig
	.GSENSOR_SDI(GSENSOR_SDI_sig) ,	// inout  GSENSOR_SDI_sig
	.GSENSOR_SDO(GSENSOR_SDO_sig) ,	// inout  GSENSOR_SDO_sig
	.ARDUINO_IO(ARDUINO_IO_sig) ,	// inout [15:0] ARDUINO_IO_sig
	.ARDUINO_RESET_N(ARDUINO_RESET_N_sig) 	// inout  ARDUINO_RESET_N_sig
);

